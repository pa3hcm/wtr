#!/usr/bin/env python3

"""
This program queries the Rijkswaterstaat Waterinfo API to get data like actual water levels.
It access the 'Water Webservices API', which is documented here:
https://rijkswaterstaatdata.nl/waterdata/
"""


import json
import os
from requests import post
import sqlite3
from tempfile import NamedTemporaryFile
import argparse
import datetime


version = "0.1b"


def get_cache_db_file():
    # Generate a file name for the cache database which is unique for the current user
    cache_db_file = '/tmp/.wtr_cache_' + os.getlogin() + '.db'
    return cache_db_file


def clean_cache():
    """
    Removes the cache database file.
    """
    cache_db_file = get_cache_db_file()
    if os.path.isfile(cache_db_file):
        os.remove(cache_db_file)


def generate_timestamp(moment):
    today = datetime.date.today()
    if moment == 'midnight':
        timestamp = datetime.datetime(today.year, today.month, today.day, 0, 0, 0).isoformat()
    else:  # moment = 'now'
        timestamp = datetime.datetime(today.year, today.month, today.day, datetime.datetime.now().hour, datetime.datetime.now().minute, 0).isoformat()
    timestamp += ".000+01:00"
    print(timestamp)
    return timestamp


def init_cache_db(tmp_db_file):
    """
    Creates the database connection and creates the database tables when needed.
    Returns the database connection.
    """
    
    db = sqlite3.connect(get_cache_db_file())
    cursor = db.cursor()

    # Create table AquoMetadataLijst
    cursor.execute('''CREATE TABLE IF NOT EXISTS AquoMetadataLijst (
        AquoMetadata_MessageID INTEGER PRIMARY KEY AUTOINCREMENT,
        Parameter_Wat_Omschrijving TEXT NOT NULL,
        Compartiment_Code TEXT NOT NULL,
        Compartiment_Omschrijving TEXT NOT NULL,
        Grootheid_Code TEXT NOT NULL,
        Grootheid_Omschrijving TEXT NOT NULL)
        ''')
    db.commit()

    # Create table LocatieLijst
    cursor.execute('''CREATE TABLE IF NOT EXISTS LocatieLijst (
        Locatie_MessageID INTEGER PRIMARY KEY AUTOINCREMENT,
        Coordinatenstelsel INTEGER,
        X TEXT NOT NULL,
        Y TEXT NOT NULL,
        Naam TEXT NOT NULL,
        Code TEXT NOT NULL)
        ''')
    db.commit()

    # Create table AquoMetadataLocatieLijst
    cursor.execute('''CREATE TABLE IF NOT EXISTS AquoMetadataLocatieLijst (
        AquoMetaData_MessageID INTEGER,
        Locatie_MessageID INTEGER)
        ''')
    db.commit()

    return db


def update_cache():
    """
    Pulls a list of all available data from the API and returns it in json format.
    """

    db = init_cache_db(get_cache_db_file())

    url = "https://waterwebservices.rijkswaterstaat.nl/METADATASERVICES_DBO/OphalenCatalogus"
    jsonbody = """{
        "CatalogusFilter": {
            "Compartimenten": true,
            "Grootheden": true
            }
        }"""
    catalog = post(url, json=json.loads(jsonbody)).json()
    
    cursor = db.cursor()

    cursor.execute("DELETE FROM AquoMetadataLijst;")
    db.commit()
    for item in catalog['AquoMetadataLijst']:
        values = (
            item['AquoMetadata_MessageID'],
            item['Parameter_Wat_Omschrijving'],
            item['Compartiment']['Code'],
            item['Compartiment']['Omschrijving'],
            item['Grootheid']['Code'],
            item['Grootheid']['Omschrijving']
        )
        query = f"INSERT INTO AquoMetadataLijst (AquoMetadata_MessageID, Parameter_Wat_Omschrijving, Compartiment_Code, Compartiment_Omschrijving, Grootheid_Code, Grootheid_Omschrijving) VALUES (?, ?, ?, ?, ?, ?)"
        cursor.execute(query, values)
    db.commit()

    cursor.execute("DELETE FROM LocatieLijst;")
    db.commit()
    for item in catalog['LocatieLijst']:
        values = (
            item['Locatie_MessageID'],
            item['Coordinatenstelsel'],
            item['X'],
            item['Y'],
            item['Naam'],
            item['Code']
        )
        query = f"INSERT INTO LocatieLijst (Locatie_MessageID, Coordinatenstelsel, X, Y, Naam, Code) VALUES (?, ?, ?, ?, ?, ?)"
        cursor.execute(query, values)
    db.commit()

    cursor.execute("DELETE FROM AquoMetadataLocatieLijst;")
    db.commit()
    for item in catalog['AquoMetadataLocatieLijst']:    
        values = (
            item['AquoMetaData_MessageID'],
            item['Locatie_MessageID']
        )
        query = f"INSERT INTO AquoMetadataLocatieLijst (AquoMetaData_MessageID, Locatie_MessageID) VALUES (?, ?)"
        cursor.execute(query, values)
    db.commit()

    db.close()


def observe(args):
    """
    Queries the API for the latest data for the given location and measure.
    """

    db = init_cache_db(get_cache_db_file())
    cursor = db.cursor()

    # Get the location id
    cursor.execute(f"SELECT Code, X, Y, Naam FROM LocatieLijst WHERE Code = '{args.location}';")
    location_data = cursor.fetchone()
    
    # Get the measure id
    cursor.execute(f"SELECT Compartiment_Code, Grootheid_Code FROM AquoMetadataLijst WHERE Grootheid_Code = '{args.measure}';")
    measure_data = cursor.fetchone()
    
    # Get measurements
    midnight = generate_timestamp('midnight')
    now = generate_timestamp('now')
    url = "https://waterwebservices.rijkswaterstaat.nl/ONLINEWAARNEMINGENSERVICES_DBO/OphalenWaarnemingen"
    jsonbody = """{"Locatie": {"Code": "%s", "X": %s, "Y": %s},
    "AquoPlusWaarnemingMetadata": {"AquoMetadata": {"Compartiment": {"Code": "%s"}, "Grootheid": {"Code": "%s"}}},
    "Periode": {"Begindatumtijd": "%s", "Einddatumtijd": "%s"}
    }""" % (location_data[0], location_data[1], location_data[2], measure_data[0], measure_data[1], midnight, now)
    observations = post(url, json=json.loads(jsonbody), headers={'Content-Type': 'application/json'}).json()
    
    if observations['Succesvol']:
        if len(observations['WaarnemingenLijst'][0]['MetingenLijst']) > 0:
            cursor.execute(f"SELECT Parameter_Wat_Omschrijving, Compartiment_Code, Compartiment_Omschrijving, Grootheid_Code, Grootheid_Omschrijving FROM AquoMetadataLijst WHERE Grootheid_Code = '{args.measure}';")
            [what, comp_code, comp_descr, measure_code, measure_descr] = cursor.fetchone()
            if not args.no_headers:
                print("#")
                print(f"# Description: {what}")
                print(f"# Compartment: {comp_code} ({comp_descr})")
                print(f"# Measure: {measure_code} ({measure_descr})")
                print(f"# Location: {location_data[0]} ({location_data[3]})")
                print("#")
                print("# Timestamp                      Value")
                for item in observations['WaarnemingenLijst'][0]['MetingenLijst'][-int(args.rows):]:
                    print(f"  {item['Tijdstip']}  {item['Meetwaarde']['Waarde_Numeriek']}")
            else:
                for item in observations['WaarnemingenLijst'][0]['MetingenLijst'][-int(args.rows):]:
                    print(f"{item['Tijdstip']}  {item['Meetwaarde']['Waarde_Numeriek']}")
        else:
            print("No data available")
    else:
        print("Error: " + observations['Foutmelding'])

    db.close()


def list_cache(args):
    """
    Lists interesting objects from the catalog, based on the --category argument.
    """

    db = init_cache_db(get_cache_db_file())
    cursor = db.cursor()
    
    if args.category == 'locations':
        print("Location (Name): Compartment_Code (Description) - Measure (Description)")
        cursor.execute("SELECT Code, Naam, Compartiment_Code, Compartiment_Omschrijving, Grootheid_Code, Grootheid_Omschrijving FROM AquoMetadataLijst INNER JOIN AquoMetadataLocatieLijst ON AquoMetadataLijst.AquoMetadata_MessageID = AquoMetadataLocatieLijst.AquoMetaData_MessageID INNER JOIN LocatieLijst ON AquoMetadataLocatieLijst.Locatie_MessageID = LocatieLijst.Locatie_MessageID ORDER BY Code, Naam;")
        for row in cursor.fetchall():
            print(f"{row[0]} ({row[1]}): {row[2]} ({row[3]}) - {row[4]} ({row[5]})")
    elif args.category == 'measures':
        print("Compartment_Code (Description): Measure (Description) - Note")
        cursor.execute("SELECT Compartiment_Code, Compartiment_Omschrijving, Grootheid_Code, Grootheid_Omschrijving, Parameter_Wat_Omschrijving FROM AquoMetadataLijst ORDER BY Compartiment_Code, Grootheid_Code;")    
        for row in cursor.fetchall():
            print(f"{row[0]} ({row[1]}): {row[2]} ({row[3]}) - {row[4]}")
    else:
        print("Unknown category")
    db.close()


def parse_arguments():
    """
    Parses the command line arguments and returns the parsed arguments.
    """

    global version

    parser = argparse.ArgumentParser(
        description='wtr - Rijkswaterstaat Waterinfo API client v' + version,
        argument_default='get'
        )
    parser.add_argument('command',
        choices=['clean', 'list', 'observe', 'update'],
        help='Command to execute',
        )
    parser.add_argument('-c', '--category',
        default='locations',
        help='Category to query: locations (default), measures',
        )
    parser.add_argument('-l', '--location',
        help='Filter by location code',
        )
    parser.add_argument('-m', '--measure',
        default='WATHTE',
        help='Measure to query (default WATHTE)',
        )
    parser.add_argument('-r', '--rows',
        default='18',
        help='Number of rows to show (default 18)',
        )
    parser.add_argument('--no-headers',
        action='store_true',
        default=False,
        help='Disable headers; just print the data',
        )
    
    return parser.parse_args()


if __name__ == "__main__":

    cache_db_file = get_cache_db_file()
    if not os.path.isfile(cache_db_file):
        update_cache()

    args = parse_arguments()
    if args.command == 'clean':
        clean_cache()
    elif args.command == 'list':
        list_cache(args)
    elif args.command == 'observe':
        observe(args)
    elif args.command == 'update':
        print("Updating cache...")
        update_cache()
